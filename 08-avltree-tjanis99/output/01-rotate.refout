////////////////////////////////////////////////////////////////////////////////
// test-rotate - test your tree rotation functions
//   
//   For these tests, a sequence of numbers is inserted in the order given into
// your tree using bst_insert (no AVL fixing is done). A rotation is then 
// performed using the specified node as a pivot.  
//   Statistics about your tree are printed out before and after the rotation. It
// will likely be helpful to sketch out the actual trees so you have an idea of  
// what to expect. The number of nodes should never change, and is_bst should  
// always stay true for these examples. 
////////////////////////////////////////////////////////////////////////////////
// test-rotate - 1,2,3
////////////////////////////////////////////////////////////////////////////////
  Constructing BST by inserting [ 1 2 3 ]
  Before rotation: 
  preorder:   1 2 3 
  inorder:    1 2 3 
  postorder:  3 2 1 
  levelorder: 1 2 3 
  count: 3; root: 1; min: 1; max: 3; height: 2; is_bst: true; balanced? false 

  After rotation left on node containing 1: 
  preorder:   2 1 3 
  inorder:    1 2 3 
  postorder:  1 3 2 
  levelorder: 2 1 3 
  count: 3; root: 2; min: 1; max: 3; height: 1; is_bst: true; balanced? true

////////////////////////////////////////////////////////////////////////////////
// test-rotate - 3,2,1
////////////////////////////////////////////////////////////////////////////////
  Constructing BST by inserting [ 3 2 1 ]
  Before rotation: 
  preorder:   3 2 1 
  inorder:    1 2 3 
  postorder:  1 2 3 
  levelorder: 3 2 1 
  count: 3; root: 3; min: 1; max: 3; height: 2; is_bst: true; balanced? false 

  After rotation right on node containing 3: 
  preorder:   2 1 3 
  inorder:    1 2 3 
  postorder:  1 3 2 
  levelorder: 2 1 3 
  count: 3; root: 2; min: 1; max: 3; height: 1; is_bst: true; balanced? true

////////////////////////////////////////////////////////////////////////////////
// test-rotate - right at root of 4,2,5,1,3
////////////////////////////////////////////////////////////////////////////////
  Constructing BST by inserting [ 4 2 5 1 3 ]
  Before rotation: 
  preorder:   4 2 1 3 5 
  inorder:    1 2 3 4 5 
  postorder:  1 3 2 5 4 
  levelorder: 4 2 5 1 3 
  count: 5; root: 4; min: 1; max: 5; height: 2; is_bst: true; balanced? true

  After rotation right on node containing 4: 
  preorder:   2 1 4 3 5 
  inorder:    1 2 3 4 5 
  postorder:  1 3 5 4 2 
  levelorder: 2 1 4 3 5 
  count: 5; root: 2; min: 1; max: 5; height: 2; is_bst: true; balanced? true

////////////////////////////////////////////////////////////////////////////////
// test-rotate - left at root of 2,1,4,3,5
////////////////////////////////////////////////////////////////////////////////
  Constructing BST by inserting [ 2 1 4 3 5 ]
  Before rotation: 
  preorder:   2 1 4 3 5 
  inorder:    1 2 3 4 5 
  postorder:  1 3 5 4 2 
  levelorder: 2 1 4 3 5 
  count: 5; root: 2; min: 1; max: 5; height: 2; is_bst: true; balanced? true

  After rotation left on node containing 2: 
  preorder:   4 2 1 3 5 
  inorder:    1 2 3 4 5 
  postorder:  1 3 2 5 4 
  levelorder: 4 2 5 1 3 
  count: 5; root: 4; min: 1; max: 5; height: 2; is_bst: true; balanced? true

////////////////////////////////////////////////////////////////////////////////
// test-rotate - 1-7, rotate left at bottom (5)
////////////////////////////////////////////////////////////////////////////////
  Constructing BST by inserting [ 1 2 3 4 5 6 7 ]
  Before rotation: 
  preorder:   1 2 3 4 5 6 7 
  inorder:    1 2 3 4 5 6 7 
  postorder:  7 6 5 4 3 2 1 
  levelorder: 1 2 3 4 5 6 7 
  count: 7; root: 1; min: 1; max: 7; height: 6; is_bst: true; balanced? false 

  After rotation left on node containing 5: 
  preorder:   1 2 3 4 6 5 7 
  inorder:    1 2 3 4 5 6 7 
  postorder:  5 7 6 4 3 2 1 
  levelorder: 1 2 3 4 6 5 7 
  count: 7; root: 1; min: 1; max: 7; height: 5; is_bst: true; balanced? false 

////////////////////////////////////////////////////////////////////////////////
// test-rotate - 7-1, rotate right at bottom (3)
////////////////////////////////////////////////////////////////////////////////
  Constructing BST by inserting [ 7 6 5 4 3 2 1 ]
  Before rotation: 
  preorder:   7 6 5 4 3 2 1 
  inorder:    1 2 3 4 5 6 7 
  postorder:  1 2 3 4 5 6 7 
  levelorder: 7 6 5 4 3 2 1 
  count: 7; root: 7; min: 1; max: 7; height: 6; is_bst: true; balanced? false 

  After rotation right on node containing 3: 
  preorder:   7 6 5 4 2 1 3 
  inorder:    1 2 3 4 5 6 7 
  postorder:  1 3 2 4 5 6 7 
  levelorder: 7 6 5 4 2 1 3 
  count: 7; root: 7; min: 1; max: 7; height: 5; is_bst: true; balanced? false 

