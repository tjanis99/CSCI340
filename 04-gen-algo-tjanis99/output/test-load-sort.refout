********************************************************************************
* test-load-sort                                                                
*                                                                               
*  This test program is the ultimate test to make sure that you've implemented  
* things correctly. It loads a tab-separated-values file using your load_tsv    
* function, using calc_widths to find out how wide each column is, and printing 
* it out. It then prompts the user a column number and a sort method.           
*                                                                               
*  The program uses the sort functions you implement in order to sort the table 
* based on the values in the column selected, and prints them out.              
*                                                                               
*  The reference output was done by running this program without command line   
* arguments and redirecting test.stdin in on standard input.                    
*                                                                               
* % ./test-load-sort < test.stdin                                               
*                                                                               
********************************************************************************

Table read from file, no sorting performed:
    [ 20060 | Grace   | Hopper     | 54000.00  | 101 ]
    [ 37330 | Alan    | Turing     | 60000.00  | 230 ]
    [ 24129 | Ada     | Lovelace   | 70000.00  | 150 ]
    [ 39074 | Donald  | Knuth      | 65000.00  | 111 ]
    [ 35050 | Brian   | Kernighan  | 102500.00 | 201 ]
    [ 24946 | Dennis  | Ritchie    | 103050.00 | 330 ]
    [ 20837 | Bjarne  | Stroustrup | 120000.50 | 340 ]
    [ 34552 | Charles | Babbage    | 80000.00  | 100 ]
    [ 25628 | Edsger  | Dijkstra   | 69000.99  | 102 ]
    [ 25749 | Claude  | Shannon    | 99999.99  | 466 ]
    [ 37383 | John    | Carmack    | 200000.00 | 201 ]
    [ 40992 | Linus   | Torvalds   | 190000.50 | 515 ]

Which column do you want to sort on? (-1 to quit) Sort how? 1) Alphabetical 2) Numeric: 
  Sorting numerically on column 0
    [ 20060 |   Grace |     Hopper |  54000.00 | 101 ]
    [ 20837 |  Bjarne | Stroustrup | 120000.50 | 340 ]
    [ 24129 |     Ada |   Lovelace |  70000.00 | 150 ]
    [ 24946 |  Dennis |    Ritchie | 103050.00 | 330 ]
    [ 25628 |  Edsger |   Dijkstra |  69000.99 | 102 ]
    [ 25749 |  Claude |    Shannon |  99999.99 | 466 ]
    [ 34552 | Charles |    Babbage |  80000.00 | 100 ]
    [ 35050 |   Brian |  Kernighan | 102500.00 | 201 ]
    [ 37330 |    Alan |     Turing |  60000.00 | 230 ]
    [ 37383 |    John |    Carmack | 200000.00 | 201 ]
    [ 39074 |  Donald |      Knuth |  65000.00 | 111 ]
    [ 40992 |   Linus |   Torvalds | 190000.50 | 515 ]

Which column do you want to sort on? (-1 to quit) Sort how? 1) Alphabetical 2) Numeric: 
  Sorting alphabetically on column 1
    [ 24129 | Ada     | Lovelace   | 70000.00  | 150 ]
    [ 37330 | Alan    | Turing     | 60000.00  | 230 ]
    [ 20837 | Bjarne  | Stroustrup | 120000.50 | 340 ]
    [ 35050 | Brian   | Kernighan  | 102500.00 | 201 ]
    [ 34552 | Charles | Babbage    | 80000.00  | 100 ]
    [ 25749 | Claude  | Shannon    | 99999.99  | 466 ]
    [ 24946 | Dennis  | Ritchie    | 103050.00 | 330 ]
    [ 39074 | Donald  | Knuth      | 65000.00  | 111 ]
    [ 25628 | Edsger  | Dijkstra   | 69000.99  | 102 ]
    [ 20060 | Grace   | Hopper     | 54000.00  | 101 ]
    [ 37383 | John    | Carmack    | 200000.00 | 201 ]
    [ 40992 | Linus   | Torvalds   | 190000.50 | 515 ]

Which column do you want to sort on? (-1 to quit) Sort how? 1) Alphabetical 2) Numeric: 
  Sorting alphabetically on column 2
    [ 34552 | Charles | Babbage    | 80000.00  | 100 ]
    [ 37383 | John    | Carmack    | 200000.00 | 201 ]
    [ 25628 | Edsger  | Dijkstra   | 69000.99  | 102 ]
    [ 20060 | Grace   | Hopper     | 54000.00  | 101 ]
    [ 35050 | Brian   | Kernighan  | 102500.00 | 201 ]
    [ 39074 | Donald  | Knuth      | 65000.00  | 111 ]
    [ 24129 | Ada     | Lovelace   | 70000.00  | 150 ]
    [ 24946 | Dennis  | Ritchie    | 103050.00 | 330 ]
    [ 25749 | Claude  | Shannon    | 99999.99  | 466 ]
    [ 20837 | Bjarne  | Stroustrup | 120000.50 | 340 ]
    [ 40992 | Linus   | Torvalds   | 190000.50 | 515 ]
    [ 37330 | Alan    | Turing     | 60000.00  | 230 ]

Which column do you want to sort on? (-1 to quit) Sort how? 1) Alphabetical 2) Numeric: 
  Sorting numerically on column 3
    [ 20060 |   Grace |     Hopper |  54000.00 | 101 ]
    [ 37330 |    Alan |     Turing |  60000.00 | 230 ]
    [ 39074 |  Donald |      Knuth |  65000.00 | 111 ]
    [ 25628 |  Edsger |   Dijkstra |  69000.99 | 102 ]
    [ 24129 |     Ada |   Lovelace |  70000.00 | 150 ]
    [ 34552 | Charles |    Babbage |  80000.00 | 100 ]
    [ 25749 |  Claude |    Shannon |  99999.99 | 466 ]
    [ 35050 |   Brian |  Kernighan | 102500.00 | 201 ]
    [ 24946 |  Dennis |    Ritchie | 103050.00 | 330 ]
    [ 20837 |  Bjarne | Stroustrup | 120000.50 | 340 ]
    [ 40992 |   Linus |   Torvalds | 190000.50 | 515 ]
    [ 37383 |    John |    Carmack | 200000.00 | 201 ]

Which column do you want to sort on? (-1 to quit) Sort how? 1) Alphabetical 2) Numeric: 
  Sorting numerically on column 4
    [ 34552 | Charles |    Babbage |  80000.00 | 100 ]
    [ 20060 |   Grace |     Hopper |  54000.00 | 101 ]
    [ 25628 |  Edsger |   Dijkstra |  69000.99 | 102 ]
    [ 39074 |  Donald |      Knuth |  65000.00 | 111 ]
    [ 24129 |     Ada |   Lovelace |  70000.00 | 150 ]
    [ 35050 |   Brian |  Kernighan | 102500.00 | 201 ]
    [ 37383 |    John |    Carmack | 200000.00 | 201 ]
    [ 37330 |    Alan |     Turing |  60000.00 | 230 ]
    [ 24946 |  Dennis |    Ritchie | 103050.00 | 330 ]
    [ 20837 |  Bjarne | Stroustrup | 120000.50 | 340 ]
    [ 25749 |  Claude |    Shannon |  99999.99 | 466 ]
    [ 40992 |   Linus |   Torvalds | 190000.50 | 515 ]

Which column do you want to sort on? (-1 to quit) 